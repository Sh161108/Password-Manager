// The master password for accessing the system
const master_pass = "pass@43";

// Function to check the master password
function pass_check() {
  // Allow three attempts to enter the correct master password
  for (let i = 3; i > 0; i--) {
    const master_pass_ask = prompt("What is the master password?");
    if (master_pass_ask === master_pass) {
      console.log("Welcome to the system");
      return;
    } else {
      console.log("Wrong Password. " + (i - 1) + " chance(s) left");
      if (i === 1) {
        console.log("You have been locked out");
        break;
      }
    }
  }
}

// Function to load saved credentials from local storage
function loadCredentials() {
  const credentials = localStorage.getItem("credentials");
  return credentials ? JSON.parse(credentials) : [];
}

// Function to save credentials to local storage
function saveCredentials(credentials) {
  localStorage.setItem("credentials", JSON.stringify(credentials));
}

// Load credentials into a global variable
let credentials = loadCredentials();

// Function to add new passwords to the system
function add_pass() {
  let ask = prompt("Would you like to add a password?");
  while (ask.toLowerCase() === "yes") {
    const username = prompt("Type the username: ");
    const pass = prompt("Type the password: ");
    const site = prompt("Type the name of the site: ");
    credentials.push({
      username,
      pass,
      site
    });
    saveCredentials(credentials);
    ask = prompt("Would you like to add another password?");
  }
}

// Function to view saved passwords
function view_pass() {
  const ask = prompt("Would you like to view other passwords?");
  if (ask.toLowerCase() === "yes") {
    credentials.forEach(credential => {
      console.log(`Username: ${credential.username}, Password: ${credential.pass}, Site: ${credential.site}`);
    });
  }
}

// Function to delete passwords from the system
function delete_pass() {
  let ask = prompt("Would you like to delete passwords?");
  while (ask.toLowerCase() === "yes") {
    const username = prompt("Type the username: ");
    const pass = prompt("Type the password: ");
    const site = prompt("Type the name of the site: ");
    const index = credentials.findIndex(credential =>
      credential.username === username && credential.pass === pass && credential.site === site
    );
    if (index !== -1) {
      credentials.splice(index, 1);
      saveCredentials(credentials);
      console.log("Password deleted successfully.");
    } else {
      console.log("No matching credential found.");
    }
    ask = prompt("Would you like to delete another password?");
  }
}

// Function to search for passwords
function search_pass() {
  let ask = prompt("Would you like to search for password?");
  while (ask == "yes") {
    const searchTerm = prompt("Enter username or site to search for: ");
    const results = credentials.filter(credential =>
      credential.username.includes(searchTerm) || credential.site.includes(searchTerm)
    );
    if (results.length > 0) {
      results.forEach(result => {
        console.log(`Username: ${result.username}, Password: ${result.pass}, Site: ${result.site}`);
      });
    } else {
      console.log("No matching credentials found.");
    }
    ask = prompt("Would you like to search for password?");
  }
}

// Function to edit existing passwords
function edit_pass() {
  let ask = prompt("Would you like to edit existing passwords?");
  while (ask.toLowerCase() === "yes") {
    const username = prompt("Enter the username of the credential you want to edit: ");
    const site = prompt("Enter the site of the credential you want to edit: ");

    // Validate inputs
    if (!username || !site) {
      console.log("Username and site cannot be empty.");
      continue; // Skip to the next iteration
    }

    const index = credentials.findIndex(credential =>
      credential.username === username && credential.site === site
    );
    if (index !== -1) {
      const confirmation = confirm("Are you sure you want to change the password?");
      if (confirmation) {
        const newPass = prompt("Enter the new password: ");
        // You should consider hashing or encrypting the password before storing it.
        credentials[index].pass = newPass;
        saveCredentials(credentials);
        console.log("Password updated successfully.");
      } else {
        console.log("Password change canceled.");
      }
    } else {
      console.log("No matching credential found.");
    }
    ask = prompt("Would you like to edit existing passwords?");
  }
}

// Start the password checking process
pass_check();
// Call function to add passwords
add_pass();
// Call function to delete passwords
delete_pass();
// Call function to view passwords
view_pass();
// Call function to search passwords
search_pass();
// Call function to edit passwords
edit_pass();
